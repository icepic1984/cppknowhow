* C++ Know-How
** Declaration vs Definition
 We’ll use the term symbol to refer to any kind of “code entity” that a
 linker works with, i.e. variables, functions and classes/structs.

 A *declaration* tells the compiler about the existence of a certain
 symbol and makes it possible to refer to that symbol everywhere where
 the explicit memory address or required storage of that symbol is not
 required. A *definition* tells the compiler what the body of a
 function contains or how much memory it must allocate for a variable.

 Example for function declaration and definition
 #+begin_src cpp 
 int f();             // declaration
 int f() {return 42;} // definition
 
 int main() {}
 #+end_src
 
 Example for variable declaration and definition
 #+begin_src cpp 
 int x;             // definition
 int y = 42;        // definition and initialization
 extern int u;      // declaration 
 extern int v = 42; // definition
 int main() {}
 #+end_src

 #+RESULTS:

*** One Definition Rule (ODR)

  + In any translation unit, a template, type, function, or object can
    have no more than one definition. Some of these can have any number
    of declarations. A definition provides an instance.

  + In the entire program, an object or non-inline function cannot have
    more than one definition; if an object or function is used, it must
    have exactly one definition. You can declare an object or function
    that is never used, in which case you don't have to provide a
    definition. In no event can there be more than one definition.

  + Some things, like types, templates, and extern inline functions, can
    be defined in more than one translation unit. For a given entity,
    each definition must be the same. Non-extern objects and functions
    in different translation units are different entities, even if their
    names and types are the same.

  Some violations of the ODR must be diagnosed by the compiler. Other
  violations, particularly those that span translation units, are not
  required to be diagnosed.[1]
** Argument vs Parameter
 *Argument* is the value/variable/reference being passed in, *parameter*
 is the receiving variable used w/in the function/block.
** Linkage
 A *translation unit* refers to an implementation (.c/.cpp) file and
 all header (.h/.hpp) files it includes. If an object or function
 inside such a translation unit has *internal linkage*, then that
 specific symbol is only visible to the linker within that translation
 unit. If an object or function has *external linkage*, the linker can
 also see it when processing other translation units. The ~static~
 keyword, when used in the global namespace, forces a symbol to have
 internal linkage. The ~extern~ keyword results in a symbol having
 external linkage. Anonymous namespaces are another way to declare one
 or more symbols to have internal linkage.

 The compiler defaults the linkage of symbols such that:

 + Non-const global variables have external linkage by default
 + Const global variables have internal linkage by default
 + Functions have external linkage by default

** Expressions
 An expression is a sequence of operators and their operands, that
 specifies a computation. Expression evaluation may produce a result
 and may generate side-effects.

*** Value categories
  Each C++ expression (an operator with its operands, a literal, a
  variable name, etc.) is characterized by two independent properties: a
  type and a value category. Each expression has some non-reference
  type, and each expression belongs to exactly one of the three primary
  value categories: prvalue, xvalue, lvalue, defined as follows:

  #+begin_src dot :file value_type.png :exports none
  digraph G {
      nodesep=0.3;
      ranksep=0.2;
      margin=0.1;
      node [shape=circle];
      edge [arrowsize=0.8];
      Expression -> glvalue
      Expression -> rvalue
      glvalue -> lvalue
      glvalue -> xvalue
      rvalue -> xvalue
      rvalue -> prvalue
  }
  #+end_src

  #+RESULTS:
  [[file:value_type.png]]

**** lvalue   An lvalue (so called, historically, because lvalues could appear on
   the left-hand side of an assignment expression) designates a function
   or an object. 

   Example: If E is an expression of pointer type, then
   *E is an lvalue expression referring to the object or function to
   which E points. As another example, the result of calling a function
   whose return type is an lvalue reference is an lvalue. 

   Non-formal definition:
   An lvalue (locator value) represents an object that occupies some
   identifiable location in memory (i.e. has an address).

**** xvalue
   An xvalue (an “eXpiring” value) also refers to an object, usually near
   the end of its lifetime (so that its resources may be moved, for
   example). An xvalue is the result of certain kinds of expressions
   involving rvalue references.

   Example: The result of calling a function whose return type is an
   rvalue reference is an xvalue. 

   #+begin_src cpp :includes <string>
   std::string a;
   std::string &b = a;

   a;            // lvalue       
   b;            // lvalue
   std::move(a); // This expression is a xvalue
   #+end_src

   #+RESULTS:
**** prvalue
   A prvalue (“pure” rvalue) is an rvalue that is not an xvalue. 

   Example: The result of calling a function whose return type is not a
   reference is a prvalue. The value of a literal such as 12, 7.3e5, or
   true is also a prvalue. 
   A prvalue (“pure” rvalue) is an rvalue that is not an xvalue. 

   Example: The result of calling a function whose return type is not a
   reference is a prvalue. The value of a literal such as 12, 7.3e5, or
   true is also a prvalue. 

**** gvalue
   A glvalue (“generalized” lvalue) is an lvalue or an xvalue.
**** rvalue
   An rvalue (so called, historically, because rvalues could appear on
   the right-hand side of an assignment expressions) is an xvalue, a
   temporary object (12.2) or subobject thereof, or a value that is not
   associated with an object.
** Special member functions
 See [[https://www.youtube.com/watch?v=vLinb2fgkHk][Howard Hinnart: All you need to know about move semantics]] ([[https://de.slideshare.net/ripplelabs/howard-hinnant-accu2014][Slides]])

 Speical members are those menber function that the compiler can be
 asked to automatically generate code for.
 + Default constructor ~X();~
 + Destoructor ~\~X();~
 + Copy constructor ~X(const X& );~
 + Copy assignment ~X& operator=(const X&);~
 + Move constructor ~X(X&&);~
 + Move assignment ~X& operator=(X&&);~

 Special member functions can be:
 + not declared
 + implicitly declared (defaulted or deleted by the compiler)
 + user declared (deleted, defaulted, user-defined)

 What does user declared means?
 #+begin_src cpp 
   struct X 
   {
     X() {}        // user-declared
     X();          // user-declared but compiler generates definition
     X() = default;// user-declared 
     X() = delete; // user declared (deleted member functions participate
                   // in overload resolution
   };
 #+end_src
  
 Generation of special member functions:
|---------------------+----------------------+---------------+-----------------+-----------------+------------------+-----------------|
|                     | *Compiler generated* |               |                 |                 |                  |                 |
|---------------------+----------------------+---------------+-----------------+-----------------+------------------+-----------------|
| *User declared*     | default constructor  | destructor    | copy destructor | copy assignment | move constructor | move assignment |
|---------------------+----------------------+---------------+-----------------+-----------------+------------------+-----------------|
| nothing             | defaulted            | defaulted     | defaulted       | defaulted       | defaulted        | defaulted       |
| any constructor     | not declared         | defaulted     | defaulted       | defaulted       | defaulted        | defaulted       |
| default constructor | user declared        | defaulted     | defaulted       | defaulted       | defaulted        | defaulted       |
| destructor          | defaulted            | user declared | defaulted*      | defaulted*      | not declared     | not declared    |
| copy constructor    | not declared         | defaulted     | user declared   | defaulted*      | not declared     | not declared    |
| copy assignment     | defaulted            | defaulted     | defaulted*      | user declared   | not declared     | not declared    |
| move constructor    | not declared         | defaulted     | deleted         | deleted         | user declared    | not declared    |
| move assignment     | defaulted            | defaulted     | deleted         | deleted         | not declared     | user declared   |
|---------------------+----------------------+---------------+-----------------+-----------------+------------------+-----------------|
| * = deprecated      |                      |               |                 |                 |                  |                 |
 
** Operator Precedence
 |------------+---------------+---------------------------+---------------|
 | Precedence | Operator      | Description               | Associativity |
 |------------+---------------+---------------------------+---------------|
 |          1 | ::            | Scope resolution          | Left-to-right |
 |------------+---------------+---------------------------+---------------|
 |          2 | a++, a--      | Postfix inc/dec           | Left-to-right |
 |            | type()        | Functional cast           |               |
 |            | a()           | Functional call           |               |
 |            | a[]           | Subscript                 |               |
 |            | . ->          | Member access             |               |
 |------------+---------------+---------------------------+---------------|
 |          3 | ++a, --a      | Prefix inc/dec            | Right-to-left |
 |            | +a, -a        | Unary plus/minus          |               |
 |            | ! ~           | Logical Not, Bitwise Not  |               |
 |            | (type)        | C-style cast              |               |
 |            | *a            | Dereference               |               |
 |            | &a            | Address-of                |               |
 |            | sizeof        | Size-of                   |               |
 |            | new           | Dynamic memory allocation |               |
 |            | delete        | Dynamic memory allocation |               |
 |------------+---------------+---------------------------+---------------|
 |          4 | .*, ->*       | Pointer-to-member         | Left-to-right |
 |------------+---------------+---------------------------+---------------|
 |          5 | a*b, a/b, a%b | Mul, Div, Modul           | Left-to-right |
 |------------+---------------+---------------------------+---------------|
 |          6 | a+b, a-b      | Add, Sub                  | Left-to-right |
 |------------+---------------+---------------------------+---------------|
 |          7 | <<, >>        | Bitwise left shift, right | Left-to-right |
 |------------+---------------+---------------------------+---------------|
 |          8 | <=>           | Three-way comparison      | Left-to-right |
 |------------+---------------+---------------------------+---------------|
 |          9 | < <=          | Relation operators        | Left-to-right |
 |            | > >=          | Relation operators        | Left-to-right |
 |------------+---------------+---------------------------+---------------|
 |         10 | == !=         | Relation operators        | Left-to-right |
 |------------+---------------+---------------------------+---------------|
 |         11 | a&b           | Bitwise and               | Left-to-right |
 |------------+---------------+---------------------------+---------------|
 |         12 | a^b           | Bitwise xor               | Left-to-right |
 |------------+---------------+---------------------------+---------------|
 |         13 | a OR b        | Bitwise or                | Left-to-right |
 |------------+---------------+---------------------------+---------------|
 |         14 | &&            | Logical and               | Left-to-right |
 |------------+---------------+---------------------------+---------------|
 |         15 |               | Logical or                | Left-to-right |
 |------------+---------------+---------------------------+---------------|
 |         16 | a?b:c         | Ternary operator          | Right-to-left |
 |            | throw         |                           |               |
 |            | =             |                           |               |
 |            | +=, -=        |                           |               |
 |            | *=, /=, %=    |                           |               |
 |            | <<=, >>=      |                           |               |
 |            | &=, ^=,       |                           |               |
 |------------+---------------+---------------------------+---------------|
 |         17 | ,             | Comma Operator            | Left-to-right |

 Example bit operator

 #+begin_src cpp :includes <iostream>
 std::cout << "4 & 2   << 1: " << (4 & 2 << 1) << std::endl;
 std::cout << "(4 & 2) << 1: " << ((4 & 2) << 1) << std::endl;
 #+end_src

 #+RESULTS:
 |  4 | & |  2 | << | 1: | 4 |
 | (4 | & | 2) | << | 1: | 0 |
** What happens when you call in function in c++?
   1) Name lookup
   2) Template Argument Deduction
   3) Overload Resolution
      + Overload Resoltion has rules that select the desired overload
        by comparing the argument types agaist the parameter types.
        + Could i possible call this function?
        + Is this the best match?
   4) Access control
      + One of the last steps.
      + Once we pick a winner we decide if the allowed to call it.
   5) Virtual functtion
*** Name lookup
  + Unqualified name lookup
    
    For an unqualified name, that is a name that does not appear to
    the right of a scope resolution operator ::, name lookup examines
    the scopes as described below, until it finds at least one
    declaration of any kind, at which time the lookup stops and no
    further scopes are examined.
    
    See [[http://en.cppreference.com/w/cpp/language/unqualified_lookup][Link]]
  + Qualified name lookup
    
    A qualified name is a name that appears on the right hand side of
    the scope resolution operator :: (see also qualified identifiers).
  + Arguement dependent lookup 

    If you supply a function argument of class type, then to find the
    function name the compiler considers matching names in the
    namespace containing the argument's type.

    #+begin_src cpp :includes <iostream>
      namespace A { // Begin of namespace A

      struct B {}; 

      void foo(B x) {
         std::cout <<"foo(A)" << std::endl;
      }
      } // End of namespace A
      
      int main() {
          foo(A::B()); // ADL rule applies
      }

    #+end_src 

    #+RESULTS:
    : foo(A)






      
